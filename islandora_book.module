<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

/**
 * Implements hook_menu().
 */
function islandora_book_menu() {
  return array(
    'admin/islandora/solution_pack_config/book' => array(
      'title' => 'Book Solution Pack',
      'description' => 'Select viewers and configure ingest behavior.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_book_admin_settings_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'islandora/object/%islandora_object/pages' => array(
      'title' => 'Pages',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_book_pages_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_user_access',
      'access arguments' => array(
        2, array(ISLANDORA_VIEW_OBJECTS), array('islandora:bookCModel'),
      ),
    ),
    'islandora/object/%islandora_object/manage/book' => array(
      'title' => 'Book',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_paged_content_manage_pages_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_paged_content_manage_pages_access_callback',
      'access arguments' => array(2, array('islandora:bookCModel')),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_pages.inc',
    ),
    'islandora/object/%islandora_object/manage/book/ingest' => array(
      'title' => 'Add Page',
      'page callback' => 'islandora_book_ingest_page',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_INGEST, 2),
      'file' => 'includes/manage_book.inc',
    ),
    'islandora/object/%islandora_object/manage/book/ingest_zipped' => array(
      'title' => 'Add Zipped Pages',
      'page callback' => 'islandora_paged_content_ingest_zipped_pages',
      'page arguments' => array(2,
        array('tif', 'tiff', 'jpg', 'jpeg', 'jp2'),
        'islandora:pageCModel',
        variable_get('islandora_book_ingest_derivatives', array('ocr')),
      ),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_INGEST, 2),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_pages.inc',
    ),
    'islandora/object/%islandora_object/manage/book_page' => array(
      'title' => 'Page',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_paged_content_manage_page_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_paged_content_manage_page_access_callback',
      'access arguments' => array(2, array('islandora:pageCModel')),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_page.inc',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_book_theme() {
  return array(
    'islandora_book_book' => array(
      'variables' => array('object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-book-book',
    ),
    'islandora_book_page' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-book-page',
    ),
    'islandora_book_page_img_print' => array(
      'template' => 'theme/islandora-book-page-img-print',
      'variables' => array('islandora_content' => NULL),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function islandora_book_islandora_xml_form_builder_form_associations() {
  return array(
    'islandora_book_mods_form' => array(
      'content_model' => 'islandora:bookCModel',
      'form_name' => 'Islandora Book MODS Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_book_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_book');
  return array('Islandora Book MODS Form' => array('form_file' => "$module_path/data/forms/book_form_mods.xml"));
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_book_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_book');
  $datastreams_path = "$module_path/data/datastreams";
  // Page Content Model.
  $page_content_model = $connection->repository->constructObject('islandora:pageCModel');
  $page_content_model->owner = 'fedoraAdmin';
  $page_content_model->label = 'Islandora Page Content Model';
  $page_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $page_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $paged_content_path = drupal_get_path('module', 'islandora_paged_content');
  $datastream->setContentFromFile("$paged_content_path/xml/islandora_pageCModel_ds_composite_model.xml", FALSE);
  $page_content_model->ingestDatastream($datastream);
  // ISLANDORA-CM Datastream.
  $datastream = $page_content_model->constructDatastream('ISLANDORACM', 'M');
  $datastream->label = 'Islandora content model information';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_pageCModel_islandora_cm.xml", FALSE);
  $page_content_model->ingestDatastream($datastream);
  // Book Content Model.
  $book_content_model = $connection->repository->constructObject('islandora:bookCModel');
  $book_content_model->owner = 'fedoraAdmin';
  $book_content_model->label = 'Islandora Internet Archive Book Content Model';
  $book_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $book_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_bookCModel_ds_composite_model.xml", FALSE);
  $book_content_model->ingestDatastream($datastream);
  // ISLANDORA-CM Datastream.
  $datastream = $book_content_model->constructDatastream('ISLANDORACM', 'M');
  $datastream->label = 'Islandora content model information';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_book_cm.xml", FALSE);
  $book_content_model->ingestDatastream($datastream);
  // Book Collection.
  $book_collection = $connection->repository->constructObject('islandora:bookCollection');
  $book_collection->owner = 'fedoraAdmin';
  $book_collection->label = 'Book Collection';
  $book_collection->models = 'islandora:collectionCModel';
  $book_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $book_collection->constructDatastream('COLLECTION_POLICY', 'M');
  $datastream->label = 'COLLECTION_POLICY';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_book_collection_policy.xml", FALSE);
  $book_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $book_collection->constructDatastream('TN', 'M');
  $datastream->label = 'TN';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $book_collection->ingestDatastream($datastream);
  return array(
    'islandora_book' => array(
      'title' => 'Islandora book',
      'objects' => array(
        $page_content_model,
        $book_content_model,
        $book_collection,
      ),
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_book_islandora_bookcmodel_islandora_view_object($object) {
  $output = theme('islandora_book_book', array('object' => $object));
  return array('islandora_book' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_book_islandora_pagecmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_book_page', array('object' => $object));
  return array('islandora_book' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 *
 * Replaces the url for the search result to be the book's url, not the page.
 * The page is added as a fragment at the end of the book url.
 */
function islandora_book_islandora_pageCModel_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  // Grab the names of the appropriate solr fields from the db.
  $parent_book_field_name = variable_get('islandora_book_parent_book_solr_field', 'RELS_EXT_isMemberOf_uri_ms');
  $page_number_field_name = variable_get('islandora_paged_content_page_number_solr_field', 'RELS_EXT_isSequenceNumber_literal_ms');
  // If:
  // there's an object url AND
  // there's a solr doc AND
  // the solr doc contains the parent book AND
  // the solr doc contains the page number...
  if (isset($search_results['object_url']) &&
      isset($search_results['solr_doc']) &&
      isset($search_results['solr_doc'][$parent_book_field_name]) &&
      count($search_results['solr_doc'][$parent_book_field_name]) &&
      isset($search_results['solr_doc'][$page_number_field_name]) &&
      count($search_results['solr_doc'][$page_number_field_name])) {
    // Replace the result url with that of the parent book and add the page
    // number as a fragment.
    $book_pid = preg_replace('/info\:fedora\//', '', $search_results['solr_doc'][$parent_book_field_name][0], 1);
    $page_number = $search_results['solr_doc'][$page_number_field_name][0];

    if (islandora_object_access(ISLANDORA_VIEW_OBJECTS, islandora_object_load($book_pid))) {
      $search_results['object_url'] = "islandora/object/$book_pid";

      // XXX: Won't handle fielded searches nicely... then again, if our
      // highlighting field is not the one being search on, this makes sense?
      if ($query_processor->solrDefType == 'dismax' || $query_processor->solrDefType == 'edismax') {
        $search_results['object_url_fragment'] = "page/$page_number/mode/1up/search/" . rawurlencode($query_processor->solrQuery);
      }
    }
  }
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 *
 * Add page viewing fragment and search term to show all search results within
 * book on page load.
 */
function islandora_book_islandora_bookCModel_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  $view_types = array(
    "1" => "1up",
    "2" => "2up",
    "3" => "thumb",
  );
  if ($query_processor->solrQuery != " " && $query_processor->solrQuery) { 
    $ia_view = variable_get('islandora_internet_archive_bookreader_default_page_view', "1");
    $search_results['object_url_fragment'] = "page/1/mode/{$view_types[$ia_view]}/search/";
    $search_results['object_url_fragment'] .= rawurlencode($query_processor->solrQuery);
  }
}


/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_book_islandora_pagecmodel_islandora_ingest_steps(array $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (empty($shared_storage['book'])) {
    return;
  }
  return array(
    'islandora_book_upload_pages' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_paged_content_upload_page_form',
      'args' => array($shared_storage['book']),
      'module' => 'islandora_paged_content',
      'file' => 'includes/upload_page.form.inc',
    ),
  );
}

/**
 * Implements hook_islandora_derivative().
 *
 * XXX: Should add in ability to regenerate PDFs as well... No reliable way to
 * kick off a batch though...
 */
function islandora_book_islandora_bookcmodel_islandora_derivative() {
  $pc_module_path = drupal_get_path('module', 'islandora_paged_content');

  $derivatives = array();

  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $derive = islandora_paged_content_get_enabled_ingest_derivatives('islandora_book');

  if ($derive['image']) {
    $derivatives[] = array(
      'source_dsid' => NULL,
      'destination_dsid' => 'TN',
      'function' => array('islandora_paged_content_derive_thumbnail_of_parent'),
      'file' => "$pc_module_path/includes/derivatives.inc",
    );
  }

  return $derivatives;
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_book_islandora_pagecmodel_islandora_derivative(AbstractObject $object = NULL) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  return islandora_paged_content_page_derivatives($object, 'islandora_book');
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_book_form_islandora_object_properties_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:bookCModel', $object->models)) {
    $form['delete']['#value'] = t('Delete Book');
  }
}

/**
 * Implements hook_form_islandora_delete_object_form_alter().
 */
function islandora_book_form_islandora_delete_object_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:bookCModel', $object->models)) {
    $form['description']['#markup'] = t('This will remove the book object and all related page objects. This action cannot be undone.');
    $form['#submit'] = array('islandora_book_islandora_delete_object_form_delete_pages_submit');
  }
}

/**
 * Delete all the page objects related to the book object being deleted.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_book_islandora_delete_object_form_delete_pages_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_paged_content', 'includes/batch');
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/utilities');

  $object = $form_state['object'];
  $get_pid = function($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  $batch_delete = islandora_paged_content_delete_pages_batch($object, $pages);
  $batch_delete['operations'][] = array('islandora_paged_content_delete_parent_object_operation', array($object->id));
  batch_set($batch_delete);
  $parents = islandora_get_parents_from_rels_ext($object);
  $parent = array_pop($parents);
  $form_state['redirect'] = isset($parent) ? "islandora/object/{$parent->id}" : 'islandora';
}

/**
 * Renders the Pages local menu task.
 *
 * @param AbstractObject $object
 *   The book object to fetch the pages from.
 *
 * @return string
 *   The HTML repersentation of the given books pages.
 */
function islandora_book_pages_menu(AbstractObject $object) {
  module_load_include('inc', 'islandora', 'includes/breadcrumb');
  drupal_set_breadcrumb(islandora_get_breadcrumbs($object));
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $pages = islandora_paged_content_get_pages($object);
  return theme('islandora_objects', array('objects' => array_keys($pages)));
}

/**
 * Implements hook_islandora_update_related_objects_properties().
 */
function islandora_book_islandora_bookCModel_islandora_update_related_objects_properties($object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $get_pid = function($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  return $pages;
}

/**
 * Implements hook_islandora_xacml_editor_child_query().
 */
function islandora_book_islandora_bookCModel_islandora_xacml_editor_child_query(AbstractObject $object) {
  $pages_query = <<<EOQ
SELECT ?object from <#ri> WHERE
{
  ?object <fedora-rels-ext:isMemberOf> <info:fedora/{$object->id}>
}
EOQ;
  return array(
    'book_pages' => array(
      'type' => 'sparql',
      'query' => $pages_query,
      'description' => t('All pages of this book (existing and new).'),
      'recurse' => TRUE,
    ),
  );
}

/**
 * Implements hook_islandora_view_print_object().
 */
function islandora_book_islandora_view_print_object($object) {
  if (in_array('islandora:pageCModel', $object->models)) {
    // Theme image separately.
    $islandora_content = theme('image', array(
      'title' => $object->label,
      'path' => url("islandora/object/{$object->id}/datastream/JPG/view"),
    ));
    return theme('islandora_book_page_img_print', array(
      'islandora_content' => $islandora_content,
    ));
  }
}

/**
 * HOOK_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function islandora_book_islandora_pagecmodel_techmd_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('module', 'islandora_fits');
  $techmd = $datastream->content;
  $xml = new SimpleXMLElement($techmd);
  $fits_metadata = islandora_fits_child_xpath($xml);
  $unit = isset($fits_metadata['Jhove']['Sampling Frequency Unit'][0]) ? $fits_metadata['Jhove']['Sampling Frequency Unit'][0] : 'ins.';
  $xcount = isset($fits_metadata['Jhove']['X Sampling Frequency'][0]) ? $fits_metadata['Jhove']['X Sampling Frequency'][0] : '600';
  $ycount = isset($fits_metadata['Jhove']['Y Sampling Frequency'][0]) ? $fits_metadata['Jhove']['Y Sampling Frequency'][0] : '600';
  if ($xcount < 600 || $ycount < 600) {
    $message = t("Ingested image has a sampling frequency of @x by @y per @unit For best results use images of at least 600 by 600 per in.",
        array('@x' => $xcount, '@y' => $ycount, '@unit' => $unit));
    drupal_set_message($message, 'warning', FALSE);
  }
}
