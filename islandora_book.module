<?php

// $Id$

function islandora_book_menu() {
  $items = array();
  $items['fedora/book'] = array(
    'title' => t('Book view'),
    'page callback' => 'islandora_book_create_book_view',
    'type' => MENU_CALLBACK,
    'access arguments' => array('view fedora collection'),
  );
  $items['fedora/book_viewer'] = array(
    'title' => t('Book viewer'),
    'page callback' => 'islandora_book_book_viewer',
    'type' => MENU_CALLBACK,
    'access arguments' => array('view fedora collection'),
  );

  $items['admin/settings/islandora_book'] = array(
    'title' => 'Islandora Book Admin',
    'description' => 'Configuration Islandora Book Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_book_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'islandora_book.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['islandora/book/ocr'] = array(
    'page callback' => 'update_ocr_div',
    'access arguments' => array('view fedora collection'),
    'file' => 'islandora_book.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function islandora_book_book_viewer($pid) {
  global $user;
  $qs = '';
  if ($user->uid != 0) {
    $qs = '?uid=' . base64_encode($user->name . ':' . $user->pass);
  }

  $viewer_url = variable_get('fedora_base_url', '') . '/get/' . $pid . '/islandora:viewerSdef/getViewer' . $qs;
  $html = '<iframe src="' . $viewer_url . '" frameborder="0" scrolling="no" style="width: 100%; height: 800px;">Errors: unable to load viewer</iframe>';
  $fieldset = array(
    '#title' => t('Viewer - ') . $pid,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#value' => $html);
  drupal_add_css(path_to_theme() . '/header-viewer.css', 'theme');
  return theme('fieldset', $fieldset);
}

//loads an xslt for the main book page uses mods for most of the display.  if there is a $query parameter
// it will execute it against the book.
function islandora_book_create_book_view($pid, $query = NULL) {
  global $user;
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');
  $path = drupal_get_path('module', 'islandora_book');
  $objectHelper = new ObjectHelper;
  $xml = $objectHelper->getStream($pid, 'MODS');
  $dc_xml = $objectHelper->getStream($pid, 'DC');
  if (!$dc_xml) {
    drupal_set_message(t('Object does not exist.'), 'error');
    return '';
  }
  $simpleDCxml = simplexml_load_string($dc_xml);
  $types = $simpleDCxml->xpath('//dc:type');
  $ingested = 'false';
  if (!empty($types)) {
    foreach ($types as $type) {
      if ($type == 'ingested') {
        $ingested = 'true';
      }
    }
  }

  if (!isset($pid)) {
    drupal_set_message(t('Error getting book view, no identifier specified.'));
    return;
  }
  $proc = NULL;
  try {
    $proc = new XsltProcessor();
  } catch (Exception $e) {
    drupal_set_message(t('Error loading Book View XSLT: $e', array('!e' => $e->getMessage())));
    return;
  }

  //inject into xsl stylesheet
  $proc->setParameter('', 'userID', $user->uid);
  $proc->setParameter('', 'objectsPage', base_path());
  $proc->setParameter('', 'pid', $pid);
  $proc->setParameter('', 'ingested', $ingested);
  $xsl = new DomDocument();
  $test = $xsl->load($path . '/xsl/book_view.xsl');
  if (!isset($test)) {
    drupal_set_message(t('Error loading search results XSLT.'));
    return t('Error loading search results XSLT.');
  }

  $input = new DomDocument();
  $didLoadOk = $input->loadXML($xml);
  $output = NULL;
  if (!isset($didLoadOk)) {
    drupal_set_message(t('Error loading Book View XML.'));
    return t('Error loading Book View XML.');
  }
  else {
    $xsl = $proc->importStylesheet($xsl);
    $newdom = $proc->transformToDoc($input);
    $output .= $newdom->saveXML();
  }
  if (isset($query)) {
    module_load_include('inc', 'fedora_repository', 'SearchClass');
    $searchClass = new SearchClass();
    $pageQuery = convert_query_to_page_query($query, $pid);
    $output .= '<div>' . $searchClass->custom_search($pageQuery, $startPage, '/xsl/pageResults.xsl', 500) . '</div>'; //limit results to 500 pages of a book since there is no paging if we enable paging in xslt this can be changed
    //return $output."<div>used this query to find this page $query and new query = $pageQuery</div>";

    return $output;
  }
  else {
    return $output;
  }
}

function convert_query_to_page_query($query, $pid) {
  $newQuery = substr($query, 0, strlen($query) - 23);
  $pid = str_replace(':', '?', $pid);
  $newQuery = $newQuery . " AND PID:$pid* AND dc.type:Text";
  return $newQuery;
}

/**
 * Custom form element to do our nice images.
 */
function islandora_book_elements() {  // Change this line
  $type['imagebutton'] = array(
    '#input' => TRUE,
    '#button_type' => 'submit',
    '#executes_submit_callback' => TRUE,
    '#name' => 'op',
    '#process' => array('hook_imagebutton_process' => array()),
  );
  return $type;
}

function theme_imagebutton($element) {
  return '<input  style="background:url(\'\'); border:0px; width:10px; padding:0px,0px,0px,0px;" type="image" class="form-' . $element['#button_type'] . '" name="' . $element['#name'] . '" id="' . $element['#id'] . '" value="' . check_plain($element['#default_value']) . '" ' . drupal_attributes($element['#attributes']) . ' src="' . $element['#image'] . '" alt="' . $element['#title'] . '" title="' . $element['#title'] . "\" />\n";
}

/**
 * Implementation of hook_theme() to register how to theme image buttons.
 */
function islandora_book_theme() {
  return array(
    'imagebutton' => array(
      'arguments' => array('form' => NULL),
    ),
    'islandora_book_book_search_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'islandora_book_simple_book_search_form' => array(
      'arguments' => array('form' => NULL),
    )
  );
}

/**
 * Implementation of hook_requirements().
 *
 * @return
 *   An array describing the status of the site regarding available updates.
 *   If there is no update data, only one record will be returned, indicating
 *   that the status of core can't be determined. If data is available, there
 *   will be two records: one for core, and another for all of contrib
 *   (assuming there are any contributed modules or themes enabled on the
 *   site). In addition to the fields expected by hook_requirements ('value',
 *   'severity', and optionally 'description'), this array will contain a
 *   'reason' attribute, which is an integer constant to indicate why the
 *   given status is being returned (UPDATE_NOT_SECURE, UPDATE_NOT_CURRENT, or
 *   UPDATE_UNKNOWN). This is used for generating the appropriate e-mail
 *   notification messages during update_cron(), and might be useful for other
 *   modules that invoke update_requirements() to find out if the site is up
 *   to date or not.
 *
 * @see _update_message_text()
 * @see _update_cron_notify()
 */
function islandora_book_requirements($phase) {
  global $base_url;
  if ($phase == 'runtime') {
    module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
    $requirements['iiv-war'] = array();
    $requirements['iiv-war']['title'] = t("Islandora OpenLayers image viewer web app");
    if (!_islandora_book_viewer_available()) {
      $requirements['iiv-war']['value'] = ("Not available");
      $requirements['iiv-war']['severity'] = REQUIREMENT_ERROR;
      $requirements['iiv-war']['description'] = t('Ensure that Fedora is running and that the <a href="@iiv-home">IIV</a> app is deployed.',
              array('@iiv-home' => 'http://github.com/islandora/iiv'));
    }
    else {
      $requirements['iiv-war']['value'] = ("Available");
      $requirements['iiv-war']['severity'] = REQUIREMENT_OK;
    }
  }
  return $requirements;
}

function _islandora_book_viewer_available() {
  $url = parse_url(variable_get('fedora_base_url', 'http://localhost:8080/fedora'));
  $fedora_host = ("{$url['scheme']}://{$url['host']}" . (!empty($url['port']) ? ":{$url['port']}/" : '/'));
  $response = drupal_http_request("$fedora_host/iiv/images/loading.gif");
  return empty($response->error);
}

function islandora_book_required_fedora_objects() {


  $module_path = drupal_get_path('module', 'islandora_book');
  //add default mods form to formbuilder table
  $result = db_result(db_query('Select name from {xml_forms} where name = "%s"', 'Islandora Books MODS Form'));
  if (!$result) {
    $filename = "$module_path/xml/islandora_book_default_mods.xml";
    $form_as_string = file_get_contents($filename);
    $object = new stdClass();
    $object->name = 'Islandora Books MODS Form';
    $object->form = $form_as_string;
    $result = drupal_write_record('xml_forms', $object);
  }

  $result = db_result(db_query('Select name from {xml_forms} where name = "%s"', 'Upload Existing Books Mods'));
  if (!$result) {
    $filename = "$module_path/xml/mods_upload.xml";
    $form_as_string = file_get_contents($filename);
    $object = new stdClass();
    $object->name = 'Upload Existing Books Mods';
    $object->form = $form_as_string;
    $result = drupal_write_record('xml_forms', $object);
  }

  $result = db_result(db_query('Select content_model from {islandora_content_model_forms} where  content_model = "%s" and form_name = "%s"', 'islandora:bookCModel', 'Islandora Books MODS Form'));
  if (!$result) {
    $object = new stdClass();
    $object->content_model = 'islandora:bookCModel';
    $object->form_name = 'Islandora Books MODS Form';
    $object->dsid = 'MODS';
    $object->title_field = "['titleInfo']['title']";
    $object->transform = 'mods_to_dc.xsl';
    $result = drupal_write_record('islandora_content_model_forms', $object);
  }

  $result = db_result(db_query('Select content_model from {islandora_content_model_forms} where  content_model = "%s" and form_name = "%s"', 'islandora:bookCModel', 'Upload Existing Books Mods'));
  if (!$result) {
    $object = new stdClass();
    $object->content_model = 'islandora:bookCModel';
    $object->form_name = 'Upload Existing Books Mods';
    $object->dsid = 'MODS';
    $object->title_field = "['title']";
    $object->transform = 'mods_to_dc.xsl';
    $result = drupal_write_record('islandora_content_model_forms', $object);
  }
  // array( 'path-to-foxml-file', 'pid', 'dsid', 'path-to-datastream-file', int dsversion, boolean required)
  // make database insertions here.


  return array(
    'islandora_book' => array(
      'module' => 'islandora_book',
      'title' => 'Islandora Books',
      'objects' => array(
        array(
          'foxml_file' => "$module_path/xml/islandora_book_pageCModel.xml",
          'pid' => 'islandora:pageCModel',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_bookCModel.xml",
          'pid' => 'islandora:bookCModel',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_jp2Sdef.xml",
          'pid' => 'islandora:jp2Sdef',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_viewerSdef.xml",
          'pid' => 'islandora:viewerSdef',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_viewerSdep-bookCModel.xml",
          'pid' => 'islandora:viewerSdep-bookCModel',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_viewerSdep-pageCModel.xml",
          'pid' => 'islandora:viewerSdep-pageCModel',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_tei2htmlSdef.xml",
          'pid' => 'islandora:tei2htmlSdef',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_tei2htmlSdep-pageCModel.xml",
          'pid' => 'islandora:tei2htmlSdep-pageCModel',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_collection.xml",
          'pid' => 'islandora:collection',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_jp2Sdep-pageCModel.xml",
          'pid' => 'islandora:jp2Sdep-pageCModel',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'foxml_file' => "$module_path/xml/islandora_book_CollectionModel.xml",
          'pid' => 'islandora:CollectionModel',
          'dsid' => NULL,
          'datastream_file' => NULL,
          'dsversion' => NULL,
        ),
        array(
          'pid' => 'books:collection',
          'label' => 'Book Collection',
          'cmodel' => 'islandora:collectionCModel',
          'parent' => 'islandora:demos',
          'datastreams' => array(
            array(
              'dsid' => 'COLLECTION_POLICY',
              'datastream_file' => "$module_path/xml/book_collection_policy.xml",
            ),
            array(
              'dsid' => 'TN',
              'datastream_file' => "$module_path/images/Crystal_Clear_mimetype_man.png",
              'mimetype' => 'image/png',
            ),
          ),
        ),
      ),
    ),
  );
}

function islandora_book_purge_pages_form(&$form_state, $pid, $referrer = NULL) {
  global $base_url;
  if (!user_access('purge objects and datastreams')) {
    return NULL;
  }
  if ($pid == NULL) {
    return NULL;
  }
  $form['pid'] = array(
    '#type' => 'hidden',
    '#value' => "$pid"
  );
  if (!strstr(drupal_get_destination(), urlencode('fedora/repository'))) {
    $form['referrer'] = array(
      '#type' => 'hidden',
      '#value' => $referrer,
    );
  }
  if (!isset($form_state['storage']['confirm'])) {
    // do your normal $form definition here


    $form['submit'] = array(
      '#type' => 'image_button',
      '#src' => drupal_get_path('module', 'fedora_repository') . '/images/purge_big.png',
      '#value' => t('Purge'),
      '#suffix' => 'Purge all pages associated with this book',
    );

    return $form;
  }
  else {
    // ALSO do $form definition here. Your final submit handler (after user clicks Yes, I Confirm) will only see $form_state info defined here. Form you create here passed as param1 to confirm_form

    return confirm_form($form, 'Confirm Purge ALL pages?', $referrer, 'Are you sure you want to delete these objects? This action cannot be undone.', 'Purge Pages', 'Cancel'); //Had better luck leaving off last param 'name'
  }
  return $form;
}

function islandora_book_purge_pages_form_submit($form, &$form_state) {
  module_load_include('inc', 'fedora_repository', 'ConnectionHelper');
  $pid = $form_state['values']['pid'];
  if (!isset($form_state['storage']['confirm'])) {
    $form_state['storage']['confirm'] = TRUE; // this will cause the form to be rebuilt, entering the confirm part of the form
    $form_state['rebuild'] = TRUE; // along with this
  }
  else {

    $query = <<<XML
select \$object \$title from <#ri>
	where (\$object <dc:title> \$title
		and \$object <fedora-rels-ext:isMemberOf> <info:fedora/$pid>
		and \$object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
	order by \$title

XML;

    // this is where you do your processing after they have pressed the confirm button
    module_load_include('inc', 'fedora_repoitory', 'CollectionClass');
    $collection = new CollectionClass($pid);
    $contents = $collection->getRelatedItems($pid, $query);
    $results_xml = simplexml_load_string($contents);
    $resultsarray = array();
    foreach ($results_xml->results->result as $result) {
      $pid_to_delete = str_replace('info:fedora/', '', $result->object->attributes()->uri);

      //parse contents

      $params = array(
        "pid" => $pid_to_delete,
        "logMessage" => "Purged",
        "force" => ""
      );
      try {
        $soapHelper = new ConnectionHelper();
        $client = $soapHelper->getSoapClient(variable_get('fedora_soap_manage_url', 'http://localhost:8080/fedora/services/management?wsdl'));
        $object = $client->__soapCall('purgeObject', array($params));
        unset($form_state['storage']['confirm']);
      } catch (exception $e) {
        if (preg_match('/org\.fcrepo\.server\.security\.xacml\.pep\.AuthzDeniedException/', $e->getMessage())) {
          drupal_set_message(t('Error:  Insufficient permissions to purge object.'), 'error');
        }
        else {
          drupal_set_message(t($e->getMessage()), 'error');
        }
        return;
      }
    }
    if (!empty($form_state['values']['referrer'])) {
      $form_state['redirect'] = $form_state['values']['referrer'];
    }
    elseif (empty($collectionPid) && !empty($_SESSION['fedora_collection']) && $_SESSION['fedora_collection'] != $pid) {
      $collectionPid = $_SESSION['fedora_collection'];

      $form_state['redirect'] = "fedora/repository/$collectionPid/";
    }
    else {
      $form_state['redirect'] = 'fedora/repository/';
    }
  }
}

function islandora_book_help($path, $arg) {
  switch ($path) {
    case 'admin/help#islandora_book':
      return t(
          '<p>
         The Islandora Book Module allows users to create digital representations of books within the Fedora Repository.
         A book object is created using !mods data. A collection of associated page objects may then be created created. Page objects
         are created by ingesting a zipped folder of TIFF images, each representing a distinct page.
         Page TIFFs are used to create a series of Fedora datastreams on ingestion.  These streams include derivative images
         for display - JPEGS, Thumbnails, and JP2s, and one ore more OCR streams for text display and analysis.
         </p>
         <p>
         <h3>Configuration</h3>
         The page datatreams may be created on this server, or on an external processing server with !microservices.<br/>
         To process images from TIFFS on this server check <strong>Create derivative images locally?</strong> on the admin page. (Link at the bottom of this page).<br />
         TO create OCR streams on this server check <strong>Perform OCR on incoming TIFF images?</strong>. <br /><br />


         
        ',
          array(
            '!microservices' => l("Fedora Microservices", 'https://github.com/Islandora/fedora_microservices'),
            '!mods' => l('MODS', 'http://www.loc.gov/standards/mods/'),
          )
      );
  }
}
