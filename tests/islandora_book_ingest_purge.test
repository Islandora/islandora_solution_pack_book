<?php

/**
 * @file
 * Attempts to ingest a book and page into a randomly generated book collection.
 */

class IslandoraBookPageIngestTestCase extends IslandoraCollectionWebTestCase {

  /**
   * Get test information.
   *
   * @see IslandoraWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Book and Page Ingest/Purge',
      'description' => 'Ingests and purges a book from a randomly generated book collection, and a page from that book.',
      'group' => 'Islandora Object Management',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see IslandoraWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp(array(
      'islandora',
      'islandora_basic_collection',
      'islandora_book',
      'islandora_paged_content',
      'php_lib',
      'objective_forms',
      'xml_form_api',
      'xml_form_builder',
    ));
  }

  /**
   * Creates an administrative user and attempts to ingest a test book and page.
   */
  public function testIngestPurgeBookPage() {

    // Sets up the testing space.
    $user = $this->createDrupalAdminUser();
    $this->drupalLogin($user);
    $label = $this->randomName(16);
    $suffix = $this->randomName(16);
    $collectionpid = 'islandora:' . $suffix;
    $this->createRootTestCollection($label, 'islandora:bookCModel', $collectionpid);
    $edit = array(
      'islandora_book_ingest_derivatives[pdf]' => FALSE,
      'islandora_book_ingest_derivatives[image]' => FALSE,
      'islandora_book_ingest_derivatives[ocr]' => FALSE,
    );
    $this->drupalPost('admin/islandora/book', $edit, 'Save configuration');

    // Attempts to create the book.
    $path = 'islandora/object/' . $collectionpid . '/manage/overview/ingest';
    $title = $this->randomName(16);
    $edit = array(
      'titleInfo[title]' => $title,
    );
    $this->drupalPost($path, $edit, t('Ingest'));
    $this->assertText($title, 'Book was created', 'Islandora');

    // Checks for book datastream creation.
    $bookpid = arg(5, $this->url);
    $datastreams = array(
      'RELS-EXT',
      'MODS',
      'DC',
    );
    $this->assertDatastreams($bookpid, $datastreams);

    // Attempts to add a page to the book.
    $path = 'islandora/object/' . $bookpid . '/manage/book/ingest';
    $file = drupal_get_path('module', 'islandora_book') . '/tests/fixtures/test.tiff';
    $edit = array(
      'files[file]' => $file,
    );
    $this->drupalPost($path, $edit, t('Ingest'));

    // Checks for page datastream creation.
    $pagepid = arg(5, $this->url);
    $datastreams = array(
      'RELS-EXT',
      'OBJ',
      'DC',
    );
    $this->assertDatastreams($pagepid, $datastreams);

    $this->deleteTestObject($bookpid, $title, 'Delete Book');
    $this->deleteRootTestCollectionByPid($collectionpid);
  }
}
