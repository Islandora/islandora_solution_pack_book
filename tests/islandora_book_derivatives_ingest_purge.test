<?php

/**
 * @file
 * Attempts to ingest a book and page into a randomly generated book collection.
 * Includes derivatives created via ImageMagick, Tesseract and Large Image
 */

class IslandoraBookPageDerivativesIngestTestCase extends IslandoraCollectionWebTestCase {

  /**
   * Get test information.
   *
   * @see IslandoraWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Book and Page Ingest/Purge (With Derivatives)',
      'description' => 'Ingests and purges a book from a randomly generated book collection, and a page (with derivatives) from that book. Requires Islandora OCR, ImageMagick, and Islandora Large Image Solution Pack modules.',
      'group' => 'Islandora Book',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see IslandoraWebTestCase::setUp()
   */
  public function setUp() {
    $this->imagemagick_convert = variable_get('imagemagick_convert');
    $this->islandora_ocr_tesseract = variable_get('islandora_ocr_tesseract');
    parent::setUp(array(
      'islandora',
      'islandora_basic_collection',
      'islandora_book',
      'islandora_paged_content',
      'islandora_ocr',
      'imagemagick',
      'islandora_large_image',
    ));
  }

  /**
   * Creates an administrative user and attempts to ingest a test book and page.
   */
  public function testIngestPurgeBookPageDerivatives() {

    $user = $this->drupalCreateUser(array(
      'view fedora repository objects',
      'ingest fedora objects',
      'administer site configuration',
      'manage object properties',
      'delete fedora objects and datastreams',
      'create child collection',
    ));
    $this->drupalLogin($user);

    $label = $this->randomName(16);
    $suffix = $this->randomName(16);
    $collectionpid = 'islandora:' . $suffix;
    $model = 'islandora:bookCModel';
    $this->createTestCollection($label, $model, $collectionpid);
    $edit = array(
      'image_toolkit' => 'imagemagick',
    );
    $this->drupalPost('admin/config/media/image-toolkit', $edit, 'Save configuration');
    $edit = array(
      'imagemagick_convert' => $this->imagemagick_convert,
    );
    $this->drupalPost('admin/config/media/image-toolkit', $edit, 'Save configuration');
    $edit = array(
      'islandora_book_ingest_derivatives[pdf]' => TRUE,
      'islandora_book_ingest_derivatives[image]' => TRUE,
      'islandora_book_ingest_derivatives[ocr]' => TRUE,
    );
    $this->drupalPost('admin/islandora/book', $edit, 'Save configuration');
    $edit = array(
      'islandora_ocr_tesseract' => $this->islandora_ocr_tesseract,
    );
    $this->drupalPost('admin/islandora/ocr', $edit, 'Save configuration');
    $edit = array(
      'islandora_ocr_tesseract_enabled_languages[eng]' => TRUE,
    );
    $this->drupalPost('admin/islandora/ocr', $edit, 'Save configuration');

    // Attempts to create the book.
    $path = 'islandora/object/' . $collectionpid . '/manage/overview/ingest';
    $edit = array(
      'models' => $model,
    );
    $this->drupalPost($path, $edit, t('Ingest'));
    $this->assertText('New Object', 'Book was created', 'Islandora');

    // Checks for book datastream creation.
    $book_object = $this->getObjectFromPath($this->url);
    $datastreams = array(
      'RELS-EXT',
      'DC',
    );
    $this->assertDatastreams($book_object, $datastreams);

    // Attempts to add a page to the book.
    $path = 'islandora/object/' . $book_object . '/manage/book/ingest';
    $file = drupal_get_path('module', 'islandora_book') . '/tests/fixtures/test.tiff';
    $handle = fopen($file, "r");
    $contents = fread($handle, filesize($file));
    fclose($handle);
    $edit = array(
      'files[file]' => $file,
      'language' => 'eng',
    );
    $this->drupalPost($path, $edit, t('Ingest'));

    // Checks for page datastream creation.
    $page_object = $this->getObjectFromPath($this->url);
    $datastreams = array(
      'RELS-EXT',
      'OBJ',
      'DC',
      'PDF',
      'JP2',
      'JPG',
      'TN',
      'RELS-INT',
      'OCR',
      'HOCR',
    );
    $this->assertDatastreams($page_object, $datastreams);

    // Attempts to verify basic image datastreams.
    $datastreams = array(
      'JPG',
      'TN',
    );
    $this->assertImageDatastreams($page_object, $datastreams);

    // Attempts to verify the OBJ and JP2 datastreams.
    $this->assertTiffDatastreams($page_object, array('OBJ'));
    $this->assertJp2Datastreams($page_object, array('JP2'));

    // Determines whether or not the PDF datastream is valid.
    if (isset($page_object['PDF'])) {
      $pdf = $page_object['PDF']->content;
      $pdf_version = substr($pdf, 5, 3);
      $this->assertTrue(substr($pdf, 0, 5) == '%PDF-', "PDF datastream asserts that it is a valid PDF file using PDF version {$pdf_version}", 'Islandora');
      $pdf_streams = substr_count(bin2hex($pdf), '0a73747265616d0a');
      $this->assertTrue($pdf_streams, "PDF datastream reports the existence of {$pdf_streams} PDF streams. An extremely low number could still indicate corruption.", 'Islandora');
      $this->assertTrue(strpos(bin2hex($pdf), '0a2525454f460a'), 'PDF datastream reports the existence of the closing \'EOF\' tag required at the end of PDFs', 'Islandora');
    }

    // Determines if OCR and HOCR extraction was successful.
    if (isset($page_object['OCR'])) {
      $ocr = $page_object['OCR']->content;
      $this->assertTrue(substr_count($ocr, 'TEST TIFF') == 14, 'OCR datastream contains the words \'TEST TIFF\' repeated 14 times', 'Islandora');
    }
    if (isset($page_object['HOCR'])) {
      $hocr = $page_object['HOCR']->content;
      $this->assertTrue(substr_count($hocr, 'TEST') == 14 && substr_count($hocr, 'TIFF') == 14, 'HOCR datastream contains the words \'TEST TIFF\' repeated 14 times', 'Islandora');
    }

    $this->deleteObject($book_object, 'Delete Book');
    $this->deleteTestCollection($collectionpid);
  }
}
